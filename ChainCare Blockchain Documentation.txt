ChainCare: Blockchain Visualizations and Technical Documentation
1. DATA VISUALIZATION: Transaction Flow Graph
Transaction Processing Pipeline
[Patient] → [Smart Contract] → [Blockchain Ledger] → [Insurance Provider] → [Payment]
↓

↓

↓

↓

↓

Request

Validate

Record Hash

Verify Claim

Stablecoin

Claim

Conditions

Immutably

Auto-approve

Settlement

Detailed Transaction Graph
Node Types:
Patient Node: Initiates insurance claim with clinical data
Provider Node: Submits treatment records and invoices
Smart Contract Node: Validates claim against policy conditions
Consensus Node: Hyperledger Fabric peers validate transaction
Payment Node: Executes stablecoin transfer
Transaction Metrics:
Average Transaction Time: 3-5 seconds
Throughput: 550 TPS (Hyperledger Fabric capacity)
Consensus Algorithm: Practical Byzantine Fault Tolerance (PBFT)

2. CONSENSUS ALGORITHM VISUALIZATION
Hyperledger Fabric Consensus Mechanism
Phase 1: ENDORSEMENT
[Peer 1] ←→ [Smart Contract]
[Peer 2] ←→ [Smart Contract]
[Peer 3] ←→ [Smart Contract]
↓
All peers simulate transaction and sign endorsement
Phase 2: ORDERING

[Endorsed Tx] → [Ordering Service] → [Block Creation]
↓
Transactions ordered and packaged into blocks
Phase 3: VALIDATION
[Block] → [Committing Peers] → [Ledger Update]
↓
Each peer validates and commits to ledger

Consensus Properties:
Finality: Immediate (no probabilistic finality)
Byzantine Fault Tolerance: Yes (supports up to 1/3 malicious nodes)
Block Time: 2-3 seconds
Network Partition Handling: Ordering service ensures consistency

3. SECURITY MEASURES ARCHITECTURE
Multi-Layer Security Framework
┌─────────────────────────────────────────────────────────┐
│

│

APPLICATION LAYER SECURITY

│ • JWT Authentication • Role-Based Access Control
│ • API Rate Limiting • Input Validation

│

│

└─────────────────────────────────────────────────────────┘
↓
┌─────────────────────────────────────────────────────────┐
│

│

CRYPTOGRAPHIC SECURITY LAYER

│ • AES-256 Encryption • SHA-256 Hashing

│

│ • Digital Signatures • Public Key Infrastructure

│

└─────────────────────────────────────────────────────────┘
↓
┌─────────────────────────────────────────────────────────┐
│

│

BLOCKCHAIN CONSENSUS SECURITY

│ • PBFT Consensus

• Multi-Signature Requirements │

│ • Endorsement Policy • Immutable Audit Trail

│

└─────────────────────────────────────────────────────────┘
↓
┌─────────────────────────────────────────────────────────┐
│

│

NETWORK & DATA SECURITY

│ • TLS 1.3 Encryption • Private Data Collections

│

│ • Firewall Rules

• HSM for Key Storage

│

└─────────────────────────────────────────────────────────┘

Security Implementation Details
A. Data Encryption
At Rest: AES-256-GCM encryption for private data collections
In Transit: TLS 1.3 for all network communication
Key Management: Hardware Security Module (HSM) integration
B. Access Control Matrix
Role

| Patient Data | Claims | Payments | System Admin

--------------|--------------|--------|----------|------------Patient

| Read/Write | Submit | View

Provider

| Read

Insurer

| Read (Auth) | Approve| Execute | No Access

Admin

| No Direct

| View | No

| No Access

| No Access

| Audit | Monitor | Full Access

C. Smart Contract Security
Formal Verification: Mathematical proof of contract correctness
Access Control Lists: Chaincode-level permissions
Upgrade Mechanism: Versioned chaincode with approval process
Audit Logging: All contract invocations logged immutably

4. SYSTEM ARCHITECTURE & PCB DIAGRAM
Complete System Architecture
┌────────────────────────────────────────────────────────────────┐
│

PRESENTATION LAYER

│

│ ┌──────────────┐ ┌──────────────┐ ┌──────────────┐
│ │Patient Portal│ │Provider App │ │Insurer Portal│
│ │ (React.js) │ │ (Vue.js)

│ │ (React.js) │

│

│

│

│ └──────────────┘ └──────────────┘ └──────────────┘

│

└────────────────────────────────────────────────────────────────┘
↓ HTTPS/TLS
┌────────────────────────────────────────────────────────────────┐

│

│

API GATEWAY LAYER

│ ┌────────────────────────────────────────────────────┐
│ │ RESTful API Server (Node.js + Express)

│

│

│ │ • Authentication (JWT) • Rate Limiting

│

│

│ │ • Request Validation

│

│

• Load Balancing

│ └────────────────────────────────────────────────────┘

│

│

└────────────────────────────────────────────────────────────────┘
↓
┌────────────────────────────────────────────────────────────────┐
│

│

BUSINESS LOGIC LAYER

│ ┌───────────────────┐ ┌────────────────────┐
│ │ Smart Contracts │ │ Payment Service │
│ │ (Chaincode)

│

│ │ (Stablecoin API) │

│

│ │ • Claims Logic │ │ • USDC Integration │
│ │ • Data Access

│ │ • Settlement

│ │ • Validation

│ │

│

│

│

│

│

│

│ └───────────────────┘ └────────────────────┘

│

└────────────────────────────────────────────────────────────────┘
↓
┌────────────────────────────────────────────────────────────────┐
│

│

HYPERLEDGER FABRIC NETWORK LAYER

│ ┌──────────┐ ┌──────────┐ ┌──────────┐ ┌──────────┐
│ │ Peer 0 │ │ Peer 1 │ │ Peer 2 │ │ Peer 3 │
│ │ Hospital │ │ Pharmacy │ │ Insurer │ │ Lab

│
│

│

│ └──────────┘ └──────────┘ └──────────┘ └──────────┘
│

│

│

│

│ ┌────────────────────────────────────────────────────┐
│ │

│

Ordering Service (Raft Consensus)

│

│ └────────────────────────────────────────────────────┘
│

│

│

│ ┌────────────────────────────────────────────────────┐
│ │

│

│

Certificate Authority (Fabric CA)

│

│

│ └────────────────────────────────────────────────────┘

│

└────────────────────────────────────────────────────────────────┘
↓
┌────────────────────────────────────────────────────────────────┐
│

│

DATA STORAGE LAYER

│ ┌──────────────────┐ ┌──────────────────┐
│ │ Blockchain Ledger│ │ Off-Chain DB

│

│

│ │ • Tx Hashes

│ │ • Clinical Data │

│

│ │ • Metadata

│ │ • Large Files │

│

│ │ • Audit Trail │ │ • MongoDB

│

│

│

│ └──────────────────┘ └──────────────────┘

│

└────────────────────────────────────────────────────────────────┘

Component Interaction Diagram
┌─────────────┐
│ Patient │
└──────┬──────┘
│ 1. Submit Claim Request
↓
┌─────────────────────┐
│ Web Application │
└──────┬──────────────┘
│ 2. POST /api/claims
↓
┌─────────────────────┐
│ API Gateway

│

└──────┬──────────────┘
│ 3. Validate & Route
↓
┌─────────────────────┐
│ Smart Contract

│────→ 4. Query Patient Data

│ (Chaincode)

│←──── 5. Return Data

└──────┬──────────────┘
│ 6. Validate Claim
↓
┌─────────────────────┐
│ Consensus Engine │
│ (3 Peer Approval) │
└──────┬──────────────┘
│ 7. Endorsed Transaction
↓
┌─────────────────────┐
│ Ordering Service │
└──────┬──────────────┘
│ 8. Create Block
↓
┌─────────────────────┐
│ Blockchain Ledger │
└──────┬──────────────┘
│ 9. Commit Transaction
↓
┌─────────────────────┐

│ Payment Service

│

└──────┬──────────────┘
│ 10. Execute Stablecoin Transfer
↓
┌─────────────────────┐
│ Notification

│

│ Patient/Provider │
└─────────────────────┘

Private Data Collections Architecture
┌────────────────────────────────────────────────────┐
│

PRIVATE DATA ARCHITECTURE

│

└────────────────────────────────────────────────────┘
PUBLIC LEDGER (All Peers)
┌──────────────────────────────────────┐
│ Transaction Hash: 0x7a3f9c...

│

│ Timestamp: 2025-10-03 14:23:11

│

│ Data Hash: SHA256(Private Data)

│

│ Metadata: Claim ID, Amount

│

└──────────────────────────────────────┘
PRIVATE DATA COLLECTION 1 (Hospital + Insurer)
┌──────────────────────────────────────┐
│ Patient Name: John Doe

│

│ Diagnosis: Pneumonia

│

│ Treatment: Antibiotics

│

│ Medical History: [Encrypted]

│

└──────────────────────────────────────┘
PRIVATE DATA COLLECTION 2 (Pharmacy + Patient)
┌──────────────────────────────────────┐
│ Prescription Details: [Encrypted]

│

│ Medication List: [Encrypted]

│

│ Dosage Instructions: [Encrypted]

│

└──────────────────────────────────────┘

5. SECURITY PROTOCOLS DETAILED IMPLEMENTATION
Encryption Key Management Flow
[HSM] ────→ [Master Key]
│
├──→ [Data Encryption Key 1] → Encrypts Patient Records
├──→ [Data Encryption Key 2] → Encrypts Claims Data
└──→ [Data Encryption Key 3] → Encrypts Financial Data
Key Rotation Policy: Every 90 days
Key Backup: Distributed across 3 geographic locations

Digital Signature Verification
1. Transaction Created
└→ Hash = SHA256(Transaction Data)
2. Signature Generation
└→ Signature = Sign(Hash, Private_Key)
3. Blockchain Submission
└→ Submit(Transaction, Signature, Public_Key)
4. Verification (By Each Peer)
└→ Verify(Signature, Hash, Public_Key) == TRUE
└→ If TRUE: Endorse Transaction
└→ If FALSE: Reject Transaction

6. PERFORMANCE METRICS & BENCHMARKS
Expected System Performance
Metric

Target Value

Measurement Method

Transaction Throughput

500-550 TPS

Load testing (JMeter)

Transaction Latency

< 5 seconds

End-to-end timing

Block Creation Time

2-3 seconds

Consensus monitoring

Data Retrieval Time

< 1 second

Query performance test

Claim Processing Time

< 10 seconds

Smart contract execution

Metric

Target Value

Measurement Method

Payment Settlement Time

< 30 seconds

Stablecoin transfer

System Uptime

99.9%

Monitoring dashboard

Scalability Analysis
Current Capacity: 4 Peers
└→ 550 TPS per network
Projected Scaling:
├→ 8 Peers: ~1,000 TPS
├→ 16 Peers: ~1,800 TPS
└→ 32 Peers: ~3,000 TPS
Scaling Strategy: Horizontal (add more peer nodes)
Bottleneck: Ordering service (mitigated by Raft clustering)

7. DISASTER RECOVERY & BACKUP
Backup Architecture
REAL-TIME REPLICATION
┌──────────────┐
│ Primary Node │ ──→ [Replicate] ──→ ┌──────────────┐
│ Kigali, RW │

│ Backup Node │

└──────────────┘

│ Nairobi, KE │

└──────────────┘
│
[Replicate]
↓
┌──────────────┐
│ Backup Node │
│ Lagos, NG

│

└──────────────┘
Recovery Time Objective (RTO): < 15 minutes
Recovery Point Objective (RPO): < 5 minutes

8. COMPLIANCE & REGULATORY FRAMEWORK

Data Privacy Compliance Matrix
Regulation

Requirement

Implementation

GDPR (EU)

Right to be forgotten

Private data collections with purge capability

HIPAA (US)

Data encryption

AES-256 encryption at rest and in transit

Local Privacy Laws

Consent management

Smart contract-based consent tracking

Data Localization

In-country storage

Geographic peer distribution

CONCLUSION
This comprehensive documentation provides:
1. Transaction visualizations showing data flow through the blockchain
2. Security architecture with multiple defensive layers
3. Complete system design with component interactions
4. Performance metrics for evaluation
5. Compliance framework for regulatory adherence
The ChainCare platform leverages Hyperledger Fabric's permissioned architecture to create a secure, scalable,
and efficient healthcare data management system suitable for low-resource settings in sub-Saharan Africa.

